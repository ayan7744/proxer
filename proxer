#!/bin/bash
# Script to set system-wide proxy on arch or arch based distributions

_check_su_() {
    if [ "$(id -u)" -ne 0 ]; then 
        echo "Must be run with root privileges. Exiting..."
        exit 1
    fi
}

# setting system wide proxy
# gsettings_proxy [ --set | --unset ] PROXY_HOST PROXY_PORT USERNAME PASSWORD
_gsettings_proxy_() {
    if [ "$1" = "--set" ]; then 
        gsettings set org.gnome.system.proxy mode 'manual'
        gsettings set org.gnome.system.proxy.http enabled true
        gsettings set org.gnome.system.proxy.http host "$2"
        gsettings set org.gnome.system.proxy.http port "$3"
        gsettings set org.gnome.system.proxy use-same-proxy true
        [ -z "$4" ] || gsettings set org.gnome.system.proxy.http authentication-user "$4"
        [ -z "$5" ] || gsettings set org.gnome.system.proxy.http authentication-password "$5"
        gsettings set org.gnome.system.proxy ignore-hosts "['localhost', '127.0.0.1', 'localaddress','.localdomain.com', '::1', '10.*.*.*']"
    elif [ "$1" = "--unset" ]; then
        gsettings set org.gnome.system.proxy mode none
    else 
        exit 1
    fi 
}

# apt_proxy [ --set | --unset ] PROXY_HOST PROXY_PORT USERNAME PASSWORD
# /etc/apt/apt.conf.d/proxyconf
# apt_proxy () {
# }

# setting environment variables
# env_proxy [ --set | --unset ] PROXY_SERVER
_env_proxy_() { 
    if [ "$1" = "--set" ]; then 
        export http_proxy="$2"
        export HTTP_PROXY="$http_proxy"
        export https_proxy="$http_proxy"
        export HTTPS_PROXY="$http_proxy"
        export ftp_proxy="$http_proxy"
        export FTP_PROXY="$http_proxy"
        export rsync_proxy="$http_proxy"
        export RSYNC_PROXY="$http_proxy"
        export all_proxy="$http_proxy"
        export no_proxy="localhost,127.0.0.1,localaddress,.localdomain.com,::1,10.*.*.*"
    elif [ "$1" = "--unset" ]; then
        unset http_proxy HTTP_PROXY https_proxy HTTPS_PROXY ftp_proxy FTP_PROXY rsync_proxy RSYNC_PROXY all_proxy no_proxy
    else 
        exit 1
    fi 
}

# manage git proxy
# git_proxy [ --set | --unset ] PROXY_SERVER
_git_proxy_() {
    which git &>/dev/null || return 0 
    if [ "$1" = "--set" ]; then 
        git config --global http.proxy "$2"
        git config --global https.proxy "$2"
    elif [ "$1" = "--unset" ]; then
        git config --global --unset http.proxy
        git config --global --unset https.proxy
    else 
        exit 1
    fi 
}

# set_all_proxy PROXY_HOST PROXY_PORT USERNAME PASSWORD
_set_all_proxy_() {
    # define proxyServer properly
    if [ -z "$3" ]; then 
        proxyServer="http://$1:$2/"
    elif [ -z "$4" ]; then 
        proxyServer="http://$3@$1:$2/"
    else 
        proxyServer="http://$3:$4@$1:$2/"
    fi
    
    # check if the same proxy is already set
    if [ "$IS_PROXY_SET" = true ] && [ "$http_proxy" = "$proxyServer" ]; then
        return 0   
    fi

    _gsettings_proxy_ --set "$1" "$2" "$3" "$4"
    _git_proxy_ --set "$proxyServer"
    _env_proxy_ --set "$proxyServer"
    export IS_PROXY_SET=true
}

_unset_all_proxy_() {
    [ "$IS_PROXY_SET" = false ] && return 0   
    _gsettings_proxy_ --unset
    _git_proxy_ --unset
    _env_proxy_ --unset
    export IS_PROXY_SET=false
}

_auto_proxy_() {
    conSsid="$(nmcli -t -f NAME connection show --active)"
    if [ "$check_bssid" = true ]; then 
        conBssid="$(nmcli -f IN-USE,BSSID device wifi | awk '/^\*/{if (NR!=1) {print $2}}')"
        matchFound=false 
        for ((i=0 ; ; i++)); do
            [ -z "${con[${i},host]}" ] && break 
            if [ -z "${con[${i},ssid]}" -a "${con[${i},ssid]}" = "$conSsid" ] || [ -z "${con[${i},ssid]}" -a "${con[${i},bssid]}" = "$conBssid" ]; then
                set_all_proxy "${con[${i},host]}" "${con[${i},port]}" "${con[${i},username]}" "${con[${i},password]}"
                matchFound=true
                break
            fi
            [ "$matchFound" = false ] && _unset_all_proxy_
        done
    else
        matchFound=false 
        for ((i=0 ; ; i++)); do
            [ -z "${con[${i},host]}" ] && break 
            if [ -z "${con[${i},ssid]}" -a "${con[${i},ssid]}" = "$conSsid" ]; then
                set_all_proxy "${con[${i},host]}" "${con[${i},port]}" "${con[${i},username]}" "${con[${i},password]}"
                matchFound=true
                break
            fi
            [ "$matchFound" = false ] && _unset_all_proxy_
        done
    fi
}

# _log_() {
#     LOGGING = true
#     logfile="/tmp/proxer.log"
#     [ $LOGGING = true ] && echo "[$(date)] $*" >> $logfile
# }

_main_() {
    # if IS_PROXY_SET isn't set then export it.
    [ -z "$IS_PROXY_SET" ] && export IS_PROXY_SET=false

    # set configuration directory
    if [ -z "$XDG_CONFIG_HOME" ]; then
        confDir="$HOME/.config/proxer"
    else 
        confDir="$XDG_CONFIG_HOME/proxer"
    fi

    # make configuration directory if it doesn't exist and create an example file
    ! [ -d "$confDir" ] && mkdir -p "$confDir"

    [ -n "$(find "$confDir" -maxdepth 0 -type d -empty 2>/dev/null)" ] && tee -a "$confDir"/proxer.rc <<EOF
# This is an example file. All files in ${confDir} are sourced everytime as shell scripts.
# All lines beginning with '#' are treated as comments.

### Connections ###

# con[0,ssid]="wifi_name"; con[0,host]="proxy_domain"; con[0,port]="port_number"; con[0,username]="myuser"; con[0,password]="mypassword;

# con[1,ssid]="wifi_name_2"; con[1,host]="proxy_domain_2"; con[1,port]="port_number_2"; con[1,username]="myuser2"; con[1,password]="mypassword2;

### Options ###
check_bssid=false
EOF
    # default var values
    check_bssid=false
    # source configuration scripts
    declare -A con
    for sh in "$confDir"/*; do source "$sh"; done
    
    _auto_proxy_
}

_main_

# unset all functions
unset -f _main_ _reset_proxy_ _auto_proxy_ _unset_all_proxy_ _set_all_proxy_ _git_proxy_ _env_proxy_ _gsettings_proxy_ _check_su_ _log_
